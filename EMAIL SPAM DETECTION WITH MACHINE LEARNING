{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":982,"sourceType":"datasetVersion","datasetId":483}],"dockerImageVersionId":30635,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Import Libraries**","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"# Import necessary libraries\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, classification_report","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:22.527220Z","iopub.execute_input":"2024-07-07T14:26:22.527609Z","iopub.status.idle":"2024-07-07T14:26:24.494272Z","shell.execute_reply.started":"2024-07-07T14:26:22.527570Z","shell.execute_reply":"2024-07-07T14:26:24.492669Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"**Load the Dataset**","metadata":{}},{"cell_type":"code","source":"# Load the SMS Spam Collection Dataset\n# Make sure to replace 'your_dataset_path' with the correct path on Kaggle\nspam_data = pd.read_csv('/kaggle/input/sms-spam-collection-dataset/spam.csv', encoding='latin-1')","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:24.496462Z","iopub.execute_input":"2024-07-07T14:26:24.497215Z","iopub.status.idle":"2024-07-07T14:26:24.540449Z","shell.execute_reply.started":"2024-07-07T14:26:24.497152Z","shell.execute_reply":"2024-07-07T14:26:24.539073Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"**Data Exploration and Preprocessing**","metadata":{}},{"cell_type":"code","source":"# Explore the dataset\nprint(spam_data.head())\n\n# Drop unnecessary columns\nspam_data = spam_data[['v1', 'v2']]\nspam_data.columns = ['label', 'text']\n\n# Convert labels to binary (0 for ham, 1 for spam)\nspam_data['label'] = spam_data['label'].map({'ham': 0, 'spam': 1})\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(spam_data['text'], spam_data['label'], test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:24.542068Z","iopub.execute_input":"2024-07-07T14:26:24.542528Z","iopub.status.idle":"2024-07-07T14:26:24.581569Z","shell.execute_reply.started":"2024-07-07T14:26:24.542487Z","shell.execute_reply":"2024-07-07T14:26:24.580394Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"     v1                                                 v2 Unnamed: 2  \\\n0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n1   ham                      Ok lar... Joking wif u oni...        NaN   \n2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n3   ham  U dun say so early hor... U c already then say...        NaN   \n4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n\n  Unnamed: 3 Unnamed: 4  \n0        NaN        NaN  \n1        NaN        NaN  \n2        NaN        NaN  \n3        NaN        NaN  \n4        NaN        NaN  \n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Feature Extraction**","metadata":{}},{"cell_type":"code","source":"# Convert text data to numerical features using CountVectorizer\nvectorizer = CountVectorizer()\nX_train_vectorized = vectorizer.fit_transform(X_train)\nX_test_vectorized = vectorizer.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:24.585002Z","iopub.execute_input":"2024-07-07T14:26:24.586088Z","iopub.status.idle":"2024-07-07T14:26:24.805482Z","shell.execute_reply.started":"2024-07-07T14:26:24.586034Z","shell.execute_reply":"2024-07-07T14:26:24.804215Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"**Build and Train the Model**","metadata":{}},{"cell_type":"code","source":"# Initialize the Naive Bayes classifier\nnb_classifier = MultinomialNB()\n\n# Train the model\nnb_classifier.fit(X_train_vectorized, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:24.807330Z","iopub.execute_input":"2024-07-07T14:26:24.807713Z","iopub.status.idle":"2024-07-07T14:26:24.825449Z","shell.execute_reply.started":"2024-07-07T14:26:24.807660Z","shell.execute_reply":"2024-07-07T14:26:24.824300Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"MultinomialNB()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**Make Predictions and Evaluate the Model**","metadata":{}},{"cell_type":"code","source":"# Make predictions on the test set\ny_pred = nb_classifier.predict(X_test_vectorized)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nreport = classification_report(y_test, y_pred)\n\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\\n\", report)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:24.826892Z","iopub.execute_input":"2024-07-07T14:26:24.827299Z","iopub.status.idle":"2024-07-07T14:26:24.847298Z","shell.execute_reply.started":"2024-07-07T14:26:24.827260Z","shell.execute_reply":"2024-07-07T14:26:24.846184Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Accuracy: 0.98\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       0.98      1.00      0.99       965\n           1       0.99      0.89      0.94       150\n\n    accuracy                           0.98      1115\n   macro avg       0.98      0.95      0.96      1115\nweighted avg       0.98      0.98      0.98      1115\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Test the Model with Custom Data**","metadata":{}},{"cell_type":"code","source":"# Test the model with custom data\ncustom_data = [\"Congratulations! You've won a free vacation.\",\n               \"Can you please review and approve the attached document?\"]\n\ncustom_data_vectorized = vectorizer.transform(custom_data)\ncustom_predictions = nb_classifier.predict(custom_data_vectorized)\n\n# Print the predictions\nfor i, prediction in enumerate(custom_predictions):\n    result = \"Spam\" if prediction == 1 else \"Ham\"\n    print(f\"Prediction for custom data {i+1}: {result}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:24.848770Z","iopub.execute_input":"2024-07-07T14:26:24.849105Z","iopub.status.idle":"2024-07-07T14:26:24.856546Z","shell.execute_reply.started":"2024-07-07T14:26:24.849075Z","shell.execute_reply":"2024-07-07T14:26:24.855241Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Prediction for custom data 1: Spam\nPrediction for custom data 2: Ham\n","output_type":"stream"}]}]}