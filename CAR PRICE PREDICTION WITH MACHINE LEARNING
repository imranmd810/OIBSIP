{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4226692,"sourceType":"datasetVersion","datasetId":2491159}],"dockerImageVersionId":30635,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Import Libraries**","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:29.121703Z","iopub.execute_input":"2024-07-07T14:26:29.122117Z","iopub.status.idle":"2024-07-07T14:26:31.315343Z","shell.execute_reply.started":"2024-07-07T14:26:29.122074Z","shell.execute_reply":"2024-07-07T14:26:31.314097Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"**Load the Dataset**","metadata":{}},{"cell_type":"code","source":"# Load the Car Price Prediction dataset\n# Make sure to replace 'your_dataset_path' with the correct path on Kaggle\ncar_data = pd.read_csv('/kaggle/input/car-price-predictionused-cars/car data.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:31.317708Z","iopub.execute_input":"2024-07-07T14:26:31.318286Z","iopub.status.idle":"2024-07-07T14:26:31.353066Z","shell.execute_reply.started":"2024-07-07T14:26:31.318248Z","shell.execute_reply":"2024-07-07T14:26:31.351513Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"**Data Exploration and Preprocessing**","metadata":{}},{"cell_type":"code","source":"# Explore the dataset\nprint(car_data.head())\n\n# Drop unnecessary columns (if needed)\n# car_data = car_data.drop(['column_name1', 'column_name2'], axis=1)\n\n# Check for missing values\nprint(car_data.isnull().sum())\n\n# Handle missing values (if needed)\n# car_data = car_data.dropna()\n# Or use imputation techniques like mean or median\n# car_data['column_name'] = car_data['column_name'].fillna(car_data['column_name'].mean())","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:31.354609Z","iopub.execute_input":"2024-07-07T14:26:31.355067Z","iopub.status.idle":"2024-07-07T14:26:31.381913Z","shell.execute_reply.started":"2024-07-07T14:26:31.354999Z","shell.execute_reply":"2024-07-07T14:26:31.380300Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"  Car_Name  Year  Selling_Price  Present_Price  Driven_kms Fuel_Type  \\\n0     ritz  2014           3.35           5.59       27000    Petrol   \n1      sx4  2013           4.75           9.54       43000    Diesel   \n2     ciaz  2017           7.25           9.85        6900    Petrol   \n3  wagon r  2011           2.85           4.15        5200    Petrol   \n4    swift  2014           4.60           6.87       42450    Diesel   \n\n  Selling_type Transmission  Owner  \n0       Dealer       Manual      0  \n1       Dealer       Manual      0  \n2       Dealer       Manual      0  \n3       Dealer       Manual      0  \n4       Dealer       Manual      0  \nCar_Name         0\nYear             0\nSelling_Price    0\nPresent_Price    0\nDriven_kms       0\nFuel_Type        0\nSelling_type     0\nTransmission     0\nOwner            0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Feature Selection and Engineering**","metadata":{}},{"cell_type":"code","source":"# Identify features (X) and target variable (y)\nX = car_data[['Year', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner']]\ny = car_data['Selling_Price']\n\n# Handle categorical features using one-hot encoding (if needed)\nX = pd.get_dummies(X)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Ensure feature names match between training and testing datasets\nmissing_features = set(X_train.columns) - set(X_test.columns)\nfor feature in missing_features:\n    X_test[feature] = 0","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:31.384392Z","iopub.execute_input":"2024-07-07T14:26:31.384797Z","iopub.status.idle":"2024-07-07T14:26:31.412455Z","shell.execute_reply.started":"2024-07-07T14:26:31.384753Z","shell.execute_reply":"2024-07-07T14:26:31.410980Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"**Build and Train the Model**","metadata":{}},{"cell_type":"code","source":"# Initialize the Random Forest Regressor\nrf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n\n# Train the model\nrf_regressor.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:31.413772Z","iopub.execute_input":"2024-07-07T14:26:31.414137Z","iopub.status.idle":"2024-07-07T14:26:31.625087Z","shell.execute_reply.started":"2024-07-07T14:26:31.414104Z","shell.execute_reply":"2024-07-07T14:26:31.623899Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"RandomForestRegressor(random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**Make Predictions and Evaluate the Model**","metadata":{}},{"cell_type":"code","source":"# Make predictions on the test set\ny_pred = rf_regressor.predict(X_test)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"Mean Squared Error: {mse:.2f}\")\nprint(f\"R-squared: {r2:.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:31.626399Z","iopub.execute_input":"2024-07-07T14:26:31.626768Z","iopub.status.idle":"2024-07-07T14:26:31.644194Z","shell.execute_reply.started":"2024-07-07T14:26:31.626729Z","shell.execute_reply":"2024-07-07T14:26:31.642738Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Mean Squared Error: 0.81\nR-squared: 0.96\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Print the order of feature names for both the training and testing datasets**","metadata":{}},{"cell_type":"code","source":"# Print the order of feature names for training dataset\nprint(\"Training Feature Names:\")\nprint(X_train.columns)\n\n# Print the order of feature names for testing dataset\nprint(\"\\nTesting Feature Names:\")\nprint(X_test.columns)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:31.645918Z","iopub.execute_input":"2024-07-07T14:26:31.646378Z","iopub.status.idle":"2024-07-07T14:26:31.654020Z","shell.execute_reply.started":"2024-07-07T14:26:31.646336Z","shell.execute_reply":"2024-07-07T14:26:31.652698Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Training Feature Names:\nIndex(['Year', 'Present_Price', 'Driven_kms', 'Owner', 'Fuel_Type_CNG',\n       'Fuel_Type_Diesel', 'Fuel_Type_Petrol', 'Selling_type_Dealer',\n       'Selling_type_Individual', 'Transmission_Automatic',\n       'Transmission_Manual'],\n      dtype='object')\n\nTesting Feature Names:\nIndex(['Year', 'Present_Price', 'Driven_kms', 'Owner', 'Fuel_Type_CNG',\n       'Fuel_Type_Diesel', 'Fuel_Type_Petrol', 'Selling_type_Dealer',\n       'Selling_type_Individual', 'Transmission_Automatic',\n       'Transmission_Manual'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Test the Model with Custom Data**","metadata":{}},{"cell_type":"code","source":"# Test the model with custom data\ncustom_data = pd.DataFrame({\n    'Year': [2018],\n    'Present_Price': [10.0],\n    'Driven_kms': [50000],\n    'Owner': [0],\n    'Fuel_Type_CNG': [0],\n    'Fuel_Type_Diesel': [0],\n    'Fuel_Type_Petrol': [1],\n    'Selling_type_Dealer': [0],\n    'Selling_type_Individual': [1],\n    'Transmission_Automatic': [0],\n    'Transmission_Manual': [1]\n})\n\ncustom_prediction = rf_regressor.predict(custom_data)\n\nprint(f\"Predicted Selling Price for Custom Data: {custom_prediction[0]:.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-07T14:26:31.656049Z","iopub.execute_input":"2024-07-07T14:26:31.656502Z","iopub.status.idle":"2024-07-07T14:26:31.681108Z","shell.execute_reply.started":"2024-07-07T14:26:31.656457Z","shell.execute_reply":"2024-07-07T14:26:31.679446Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Predicted Selling Price for Custom Data: 7.79\n","output_type":"stream"}]}]}